!apt-get update
!apt-get install postgresql postgresql-contrib
!service postgresql start


!sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '0907';"
!sudo -u postgres psql -c "CREATE DATABASE sih;"
!sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE sih TO postgres;"



host = "localhost"
database = "sih"
user = "postgres"
password = "0907"


import psycopg2
from psycopg2 import sql
def table_exists(conn, table_name):
    with conn.cursor() as cursor:
        query = sql.SQL("SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'public' AND table_name = %s);")
        cursor.execute(query, (table_name,))
        return cursor.fetchone()[0]
conn = psycopg2.connect(host=host, database=database, user=user, password=password)
conn.autocommit = True  #  autocommit to execute the DROP TABLE command
table_name = 'crime_incident' # location, hotspot, crime_incident

table_list = ['crime_incident','location','hotspot']
for i in table_list:
if table_exists(conn, table_name):
    with conn.cursor() as cursor:
        drop_table_command = sql.SQL("DROP TABLE {}").format(sql.Identifier(table_name))
        cursor.execute(drop_table_command)
        print(f"Table '{table_name}' has been dropped.")
else:
    print(f"Table '{table_name}' does not exist.")
conn.close()



// create  table location_id, address, logitude_latidtude, city, state
// i stored in list , then get  

// 6 decimal point in input format 






now conn = psycopg2.connect(
    host="localhost",
    database="sih",
    user="postgres",
    password="0907"
) i want to perform action in table     hotspot_id SERIAL PRIMARY KEY,
    location_id INT,
    crime_type VARCHAR(20) CHECK (crime_type IN ('Rape', 'Kidnapping', 'Stalking', 'Dowry', 'All', 'Other')),
    incident_count INT,
    hotspot_status VARCHAR(20) CHECK (hotspot_status IN ('Low Priority', 'Monitor', 'High Priority')),
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (location_id) REFERENCES Location(location_id),
    CONSTRAINT unique_location_crime_type UNIQUE (location_id, crime_type) ) now what i want to do is  
    
    
Low Priority: incident_count < mean + std
Monitor: incident_count between mean + std and mean + 2 * std
High Priority: incident_count > mean + 2 * std